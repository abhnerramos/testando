/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
import Footer from './Footer';
import ToastContainer from './ToastContainer';
export declare type DisplayType = 'danger' | 'info' | 'success' | 'warning';
export interface IClayAlertProps extends React.HTMLAttributes<HTMLDivElement> {
    /**
     * A React Component to render the alert actions.
     */
    actions?: React.ReactNode;
    /**
     * Flag to indicate alert should automatically call `onClose`. It also
     * accepts a duration (in ms) which indicates how long to wait. If `true`
     * is passed in, the timeout will be 10000ms.
     */
    autoClose?: boolean | number;
    /**
     * Callback function for when the 'x' is clicked.
     */
    onClose?: () => void;
    /**
     * Determines the style of the alert.
     */
    displayType?: DisplayType;
    /**
     * Flag to indicate if close icon should be show. This prop is used in
     * conjunction with the `onClose`prop;
     */
    hideCloseIcon?: boolean;
    /**
     * Path to the spritemap that Icon should use when referencing symbols.
     */
    spritemap?: string;
    /**
     * The summary of the Alert, often is something like 'Error' or 'Info'.
     */
    title?: string;
    /**
     * Determines the variant of the alert.
     */
    variant?: 'feedback' | 'stripe' | 'inline';
}
declare function ClayAlert(props: IClayAlertProps): JSX.Element & {
    Footer: typeof Footer;
    ToastContainer: typeof ToastContainer;
};
declare namespace ClayAlert {
    var Footer: ({ children, className, ...otherProps }: React.HTMLAttributes<HTMLDivElement>) => JSX.Element;
    var ToastContainer: ({ children, className, ...otherProps }: import("./ToastContainer").IToastContainerProps) => JSX.Element;
}
export default ClayAlert;
