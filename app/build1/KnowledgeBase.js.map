{"version":3,"sources":["../src/KnowledgeBase.js"],"names":["setSite","res","onButtonSubmit","Liferay","method","headers","body","description","setName","setDescription","event","name","KnowledgeBase"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport ClayForm, {ClayInput} from '@clayui/form';\nimport ClayButton from '@clayui/button';\n\nimport { getSite } from './site'\n\n\nfunction KnowledgeBase() {\n  return (\n    <div>\n        <PostKnowledgeBase />\n    </div>\n  );\n}\n\nfunction PostKnowledgeBase() {\n  const [site, setSite] = useState('');\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  useEffect(() => {\n\tgetSite().then(res => {\n      setSite(res.items[0].id);\n\t})\n  }, []);\n\n\n  const onButtonSubmit = useCallback(() => {\n    Liferay.Util.fetch(`/o/headless-delivery/v1.0/sites/${site}/knowledge-base-folders`, {\n      method: 'POST',\n      headers: {'Content-Type':'application/json'},\n      body: JSON.stringify({'name':name, 'description':description})\n    }).then(() => {\n        setName('');\n        setDescription('');\n    });\n  },\n  [\n    name,\n    description\n  ]);\n\n  return (\n    <div>\n      <ClayForm.Group>\n        <label htmlFor='name'>Name</label>\n        <ClayInput\n          id=\"name\"\n          component=\"textarea\"\n          onChange={event => setName(event.target.value)}\n          type=\"text\"\n          value={name}\n        />\n      </ClayForm.Group>\n      <ClayForm.Group>\n        <label htmlFor='description'>Article Body</label>\n        <ClayInput\n          id=\"description\"\n          component=\"textarea\"\n          onChange={event => setDescription(event.target.value)}\n          type=\"text\"\n          value={description}\n        />\n      </ClayForm.Group>\n      \n    <ClayButton.Group>\n\t\t\t<ClayButton className=\"btn btn-primary\" onClick={() => onButtonSubmit()} displayType=\"secondary\">POST FOLDER</ClayButton>\n    </ClayButton.Group>\n\n    </div>\n    \n  );\n}\n\n\nexport default KnowledgeBase;"]}